openapi: 3.0.0
info:
  title: My CLI API
  version: 1.0.0
  description: A command-line tool for monitoring and wiping cache and log files.

paths:
  /search:
    get:
      summary: Searches the specified directory for specific files
      parameters:
        - name: path
          in: query
          description: The full path to the directory you want to search.
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: Specifies the search mode (log, cache, full, pattern). Default is full.
          required: false
          schema:
            type: string
            enum:
              - log
              - cache
              - full
              - pattern
            default: full
        - name: pattern
          in: query
          description: Specifies the regex pattern to match files (required if mode is pattern).
          required: false
          schema:
            type: string
        - name: no-subdirs
          in: query
          description: Prevents searching subdirectories (default is false).
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberOfFiles:
                    type: integer
                    example: 4
                  files:
                    type: array
                    items:
                      type: string
                    example:
                        - /var/log/syslog
                        - /var/log/auth.log
                        - C:\Windows\Temp\log.txt
                        - C:\Windows\Temp\log2.txt
        '400':
          description: Invalid input
        '404':
          description: Directory not found
        '500':
          description: Internal server error
  /monitored-path:
    post:
      summary: Adds a path to the monitoring database.
      parameters:
        - name: path
          in: query
          required: true
          description: The absolute path to the directory you want to monitor.
          schema:
            type: string
      responses:
        '201':
          description: Path successfully added to the monitoring database.
        '400':
          description: Invalid or non-existent path.
        '409':
            description: Path already exists in the monitoring database.
        '500':
          description: Internal server error.
    get:
      summary: Returns all monitored paths.
      responses:
        '200':
          description: Returns all monitored paths.
          content:
            application/json:
              schema:
                type: object
                properties:
                  monitors:
                    type: array
                    items:
                      $ref: '#/components/schemas/MonitorPath'
        '204':
          description: No monitored paths found.

  /monitored-path/{id}:
    delete:
      summary: Removes a path from the monitoring database.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the path you want to remove.
          schema:
            type: integer
      responses:
        '204':
          description: Path successfully removed from the monitoring database.
        '404':
          description: No monitored path with the specified ID found.

components:
  schemas:
    MonitorPath:
      type: object
      properties:
        id:
          type: integer
          example: 3210
        path:
          type: string
          example: "/etc/path/to/monitor"
        createdAt:
          type: string
          format: date
          example: "2024-11-01"
